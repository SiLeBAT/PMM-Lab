package de.bund.bfr.knime.pmm.combaseio.lib;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.Hashtable;

import de.bund.bfr.knime.pmm.common.PmmTimeSeries;

public class CombaseWriter {

	private Hashtable<String,PmmTimeSeries> buffer;
	private String filename;
	private String encoding;
	
	public CombaseWriter( final String filename, final String encoding ) {
		this.filename = filename;
		this.encoding = encoding;
		buffer = new Hashtable<String,PmmTimeSeries>();
	}
	
	public void add( final PmmTimeSeries candidate ) {
		buffer.put( candidate.recordId, candidate );
	}
	
	private void register( String recordId ) {
		
		if( !buffer.containsKey( recordId ) )
			buffer.put( recordId, new PmmTimeSeries( recordId ) );
	}
	
	public void present(
			final String recordId,
			final String organism,
			final String environment,
			final double temperature,
			final double ph,
			final double waterActivity,
			final String conditions,
			final double maximumRate,
			final double doublingTime,
			final double time,
			final double logc ) {
		
		PmmTimeSeries tsb;
		
		register( recordId );
		tsb = buffer.get( recordId );
		
		tsb.organism = organism;
		tsb.environment = environment;
		tsb.temperature = temperature;
		tsb.ph = ph;
		tsb.waterActivity = waterActivity;
		tsb.conditions = conditions;
		tsb.maximumRate = maximumRate;
		tsb.doublingTime = doublingTime;
		tsb.ts.add( new double[] { time, logc } );
	}
	
	public void flush()
	throws UnsupportedEncodingException, FileNotFoundException, IOException {

		OutputStreamWriter out;
		
		out = new OutputStreamWriter(
			new BufferedOutputStream(
			new FileOutputStream( filename ) ), encoding );
		
		for( PmmTimeSeries candidate : buffer.values() ) {
			
			if( candidate.recordId != null )
				out.write( "\"RecordID\"\t\""+candidate.recordId+"\"\n" );
			
			if( candidate.organism != null )
				out.write( "\"Organism\"\t\""+candidate.organism+"\"\n" );
			
			if( candidate.environment != null )
				out.write( "\"Environment\"\t\""+candidate.environment+"\"\n" );
			
			if( candidate.temperature != Double.NaN )
				out.write( "\"Temperature\"\t\""+candidate.temperature+" °C\"\n" );
			
			if( candidate.ph != Double.NaN )
				out.write( "\"pH\"\t\""+candidate.ph+"\"\n" );
			
			if( candidate.waterActivity != Double.NaN )
				out.write( "\"Water Activity\"\t\""+candidate.waterActivity+"\"\n" );
				
			if( candidate.conditions != null )
				out.write( "\"Conditions\"\t\""+candidate.conditions+"\"\n" );
			
			if( candidate.maximumRate != Double.NaN )
				out.write( "\"Maximum Rate\"\t\""+candidate.maximumRate+"\"\n" );
			
			if( candidate.doublingTime != Double.NaN )
				out.write( "\"Doubling Time (h)\"\t\""+candidate.doublingTime+"\"\n" );
			
			out.write( "\"Time (h)\"\t\"logc\"\n" );
			
			if( !candidate.ts.isEmpty() )
				for( double[] tuple : candidate.ts )
					out.write( "\""+tuple[ 0 ]+"\"\t\""+tuple[ 1 ]+"\"\n" );
			
			out.write( "\n\n\n" );
		}
		
		out.close();
	}
	
}
