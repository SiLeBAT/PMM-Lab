/*******************************************************************************
 * Copyright (C) 2012 Data In Motion
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
/**
 * $Id: BfrItemProviderAdapterFactory.java 651 2012-01-24 09:59:12Z sdoerl $
 */
package de.dim.bfr.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.dim.bfr.util.BfrAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BfrItemProviderAdapterFactory extends BfrAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BfrItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.Literatur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteraturItemProvider literaturItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.Literatur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteraturAdapter() {
		if (literaturItemProvider == null) {
			literaturItemProvider = new LiteraturItemProvider(this);
		}

		return literaturItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.StatistikModell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatistikModellItemProvider statistikModellItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.StatistikModell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatistikModellAdapter() {
		if (statistikModellItemProvider == null) {
			statistikModellItemProvider = new StatistikModellItemProvider(this);
		}

		return statistikModellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.StatistikModellParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatistikModellParameterItemProvider statistikModellParameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.StatistikModellParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatistikModellParameterAdapter() {
		if (statistikModellParameterItemProvider == null) {
			statistikModellParameterItemProvider = new StatistikModellParameterItemProvider(this);
		}

		return statistikModellParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.StatistikModellKatalog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatistikModellKatalogItemProvider statistikModellKatalogItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.StatistikModellKatalog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatistikModellKatalogAdapter() {
		if (statistikModellKatalogItemProvider == null) {
			statistikModellKatalogItemProvider = new StatistikModellKatalogItemProvider(this);
		}

		return statistikModellKatalogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.LiteraturListe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteraturListeItemProvider literaturListeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.LiteraturListe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteraturListeAdapter() {
		if (literaturListeItemProvider == null) {
			literaturListeItemProvider = new LiteraturListeItemProvider(this);
		}

		return literaturListeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.GeschaetztStatistikModell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeschaetztStatistikModellItemProvider geschaetztStatistikModellItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.GeschaetztStatistikModell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeschaetztStatistikModellAdapter() {
		if (geschaetztStatistikModellItemProvider == null) {
			geschaetztStatistikModellItemProvider = new GeschaetztStatistikModellItemProvider(this);
		}

		return geschaetztStatistikModellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.GeschModellParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeschModellParameterItemProvider geschModellParameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.GeschModellParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeschModellParameterAdapter() {
		if (geschModellParameterItemProvider == null) {
			geschModellParameterItemProvider = new GeschModellParameterItemProvider(this);
		}

		return geschModellParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.VersuchsBedingung} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersuchsBedingungItemProvider versuchsBedingungItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.VersuchsBedingung}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersuchsBedingungAdapter() {
		if (versuchsBedingungItemProvider == null) {
			versuchsBedingungItemProvider = new VersuchsBedingungItemProvider(this);
		}

		return versuchsBedingungItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.GeschModelList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeschModelListItemProvider geschModelListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.GeschModelList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeschModelListAdapter() {
		if (geschModelListItemProvider == null) {
			geschModelListItemProvider = new GeschModelListItemProvider(this);
		}

		return geschModelListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.VersuchsBedingungList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersuchsBedingungListItemProvider versuchsBedingungListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.VersuchsBedingungList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersuchsBedingungListAdapter() {
		if (versuchsBedingungListItemProvider == null) {
			versuchsBedingungListItemProvider = new VersuchsBedingungListItemProvider(this);
		}

		return versuchsBedingungListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.Messwerte} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MesswerteItemProvider messwerteItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.Messwerte}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMesswerteAdapter() {
		if (messwerteItemProvider == null) {
			messwerteItemProvider = new MesswerteItemProvider(this);
		}

		return messwerteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.DoubleKennzahlen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleKennzahlenItemProvider doubleKennzahlenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.DoubleKennzahlen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleKennzahlenAdapter() {
		if (doubleKennzahlenItemProvider == null) {
			doubleKennzahlenItemProvider = new DoubleKennzahlenItemProvider(this);
		}

		return doubleKennzahlenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.ParameterCovCor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterCovCorItemProvider parameterCovCorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.ParameterCovCor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterCovCorAdapter() {
		if (parameterCovCorItemProvider == null) {
			parameterCovCorItemProvider = new ParameterCovCorItemProvider(this);
		}

		return parameterCovCorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dim.bfr.Einheiten} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EinheitenItemProvider einheitenItemProvider;

	/**
	 * This creates an adapter for a {@link de.dim.bfr.Einheiten}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEinheitenAdapter() {
		if (einheitenItemProvider == null) {
			einheitenItemProvider = new EinheitenItemProvider(this);
		}

		return einheitenItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (literaturItemProvider != null) literaturItemProvider.dispose();
		if (statistikModellItemProvider != null) statistikModellItemProvider.dispose();
		if (statistikModellParameterItemProvider != null) statistikModellParameterItemProvider.dispose();
		if (statistikModellKatalogItemProvider != null) statistikModellKatalogItemProvider.dispose();
		if (literaturListeItemProvider != null) literaturListeItemProvider.dispose();
		if (geschaetztStatistikModellItemProvider != null) geschaetztStatistikModellItemProvider.dispose();
		if (geschModellParameterItemProvider != null) geschModellParameterItemProvider.dispose();
		if (versuchsBedingungItemProvider != null) versuchsBedingungItemProvider.dispose();
		if (geschModelListItemProvider != null) geschModelListItemProvider.dispose();
		if (versuchsBedingungListItemProvider != null) versuchsBedingungListItemProvider.dispose();
		if (messwerteItemProvider != null) messwerteItemProvider.dispose();
		if (doubleKennzahlenItemProvider != null) doubleKennzahlenItemProvider.dispose();
		if (parameterCovCorItemProvider != null) parameterCovCorItemProvider.dispose();
		if (einheitenItemProvider != null) einheitenItemProvider.dispose();
	}

}
